# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- '*'

pool:
  vmImage: 'ubuntu-20.04'
  demands:
  - npm

variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '5.x'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET SDK $(dotnetSdkVersion)'
  inputs:
    version: '$(dotnetSdkVersion)'
# installs nuget packages
#- task: NuGetToolInstaller@1
# finally used this task when installing user created packages
- task: NuGetToolInstaller@0
  inputs:
    versionSpec: '5.9.1'

#is UseDotNet@2 a replacement for this task or something else entirely?
#UseDotNet@2 is to install .net 

- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false


#and this one actually runs the script (this is all one task?)

- script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
  displayName: 'Compile Sass assets'

- task: gulp@1
  displayName: 'Run gulp tasks'

- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: $(wwwrootDir)

#restore the project dependency for the local manifest
#do you still need this or will the new way of installing dependency
#with the nugetcommand cover this as well
- task: NugetCommand@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'
    feedsToUse: 'select'
    vstsFeed: '$(System.TeamProject)/Tailspin.SpaceGame.Web.Models'

# - task: DotNetCoreCLI@2
#   displayName: 'Install .NET tools from local manifest'
#   inputs: 
#     command: custom
#     custom: tool
#     arguments: 'restore'

- task: DotNetCoreCLI@2
  displayName: 'Build the project -$(buildConfiguration)'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration $(buildConfiguration)'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Publish the project - $(buildConfiguration)'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    zipAfterPublish: true
  #is this replaceable with the dotnetcorecli@2 restore command
# - task: NuGetCommand@2
#   inputs:
#     restoreSolution: '$(solution)'


# - template: templates/build.yml
#   parameters:
#     buildConfiguration: 'Debug'

# - template: templates/build.yml
#   parameters:
#     buildConfiguration: 'Release'


- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()

